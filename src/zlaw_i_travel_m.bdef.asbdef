// Managed : SAP S4 framework handles the CRUD activities
managed;
//implementation in class zbp_law_i_travel_m unique; // Means that Class is at header level : Lahat ng Behavior isang class ginagamit
strict ( 2 );

define behavior for ZLAW_I_Travel_M //alias Travel
implementation in class zcl_bp_travel_law_m unique
persistent table zlaw_travel_m // Dito papasok yung data siyempre XD

// Entity Behavior Characteristics
lock master
authorization master ( instance )
etag master LastChangedAt // Field that will be checked for ETag
early numbering // Early Numbering: Auto generated ang key fields as soon as mag start ka ng transaction
{
  // Entity Behavior Body
  create ( authorization : global );
  update;
  delete;
  field ( readonly ) TravelId, CreatedBy, CreatedAt, LastChangedAt, LastChangedBy; // Recommended coz we want the Primary Key to be auto-generated & non-editable :)

  /* Feature Control for Mandatory: pag di ka nag lagay ng instance,
     ang gagawin nito, mag lalagay lang ng indicator na mandatory siya..
     you have to code pa yung validation logic */
  field ( mandatory ) AgencyId, CustomerId, BeginDate, EndDate, OverallStatus, BookingFee, CurrencyCode;
  association _Booking { create ( features : instance ); }

  // Instance Actions : Used to modify existing view instance
  action ( features : instance ) acceptTravel // This is how to define an action + Feature Control
  result[1] // Return the result to the exporting parameter with cardinality of 1
  $self; // We want to return the instance.. so ganyan siya hahah

  action ( features : instance ) rejectTravel result[1] $self;

  // Factory Actions : used to create new instance of view
  factory action copyTravel [1];

  // Internal Actions : Internal Actions (sa loob ng bdef lang)
  internal action recalculateTotalPrice;

  // Validations
  validation validateCustomer // Name of your validation
  on save {
    create; // Instance Operation
    field CustomerID; // Field to be checked
  }

  validation validateDates on save { create; field BeginDate, EndDate; }

  // Mapping fields ---
  /* Use this if you have different field names from your
   peristent table and CDS Interface View */
  mapping for zlaw_travel_m // table name
    {
      TravelId      = travel_id; // <CDS field> = <Table field>
      AgencyId      = agency_id;
      CustomerId    = customer_id;
      BeginDate     = begin_date;
      EndDate       = end_date;
      BookingFee    = booking_fee;
      TotalPrice    = total_price;
      CurrencyCode  = currency_code;
      Description   = description;
      OverallStatus = overall_status;
      CreatedBy     = created_by;
      CreatedAt     = created_at;
      LastChangedBy = last_changed_by;
      LastChangedAt = last_changed_at;
    }
}

define behavior for ZLAW_I_Booking_M //alias <alias_name>
implementation in class zcl_bp_booking_law_m unique
persistent table zlaw_booking_m
lock dependent by _Travel
authorization dependent by _Travel
//etag dependent by _Travel // Can be used if you have parent CDS
etag master LastChangedAt
early numbering
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId, LastChangedAt;
  field ( mandatory ) CarrierId, ConnectionId, FlightDate, BookingStatus;
  field ( mandatory : create, readonly : update ) BookingDate, CustomerId;
  association _Travel;
  association _BookingSupplement { create ( features : instance ); }

  // Mapping Fields
  mapping for zlaw_booking_m
    {
      TravelId      = travel_id;
      BookingId     = booking_id;
      BookingDate   = booking_date;
      CustomerId    = customer_id;
      CarrierId     = carrier_id;
      ConnectionId  = connection_id;
      FlightDate    = flight_date;
      FlightPrice   = flight_price;
      CurrencyCode  = currency_code;
      BookingStatus = booking_status;
      LastChangedAt = last_changed_at;
    }
}

define behavior for ZLAW_I_BookSuppl_M //alias <alias_name>
implementation in class zcl_bp_bksuppl_law_m unique
persistent table zlaw_bksuppl_m
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
early numbering
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId, BookingSupplementId, LastChangedAt;
  field ( mandatory ) Price, SupplementId;
  association _Travel;
  association _Booking;

  // Mapping Fields
  mapping for zlaw_bksuppl_m
    {
      TravelId            = travel_id;
      BookingId           = booking_id;
      BookingSupplementId = booking_supplement_id;
      SupplementId        = supplement_id;
      Price               = price;
      CurrencyCode        = currency_code;
      LastChangedAt       = last_changed_at;
    }
}